@using ContactWeb.ViewModels
@model ContactWeb.ViewModels.CreateEditContactDTO

@{
    ViewBag.Title = "Edit The Contact";
}

<h2>@ViewBag.Title</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            <div class="col-md-10">
                @Html.HiddenFor(model => model.UserId, new { id = "UserId", Value = ViewBag.UserId })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Birthday, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Birthday, new { htmlAttributes = new {@id="editBirthday", @class = "form-control needsDatePicker" } })
                @Html.ValidationMessageFor(model => model.Birthday, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

    <div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-12">
                @Html.Partial("_CreateEditContactAddresses"
                                    , new CreateEditAddressContainerDTO(Model.Id ?? -1, ViewBag.States
                                                                            , Model.ContactDisplayName)
                                                    { Addresses = Model.Addresses })
            </div>
        </div>
    </div>

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        <script type="text/javascript">
            $(function() {
                $(".needsDatePicker").datepicker();

                //get just the date info, no time
                var bdText = $("#editBirthday").val();
                var parts = bdText.split(' ');
                $("#editBirthday").val(parts[0]);

                //for the partial view of all contact addresses
                $("#contact_addresses").dataTable({
                    "pagingType": "full_numbers",
                    "columnDefs": [
                        { "width": "55px", "targets": 0 }, { "width": "65px", "targets": 1 },
                        { "width": "125px", "targets": 2 }, { "width": "65px", "targets": 3 },
                        { "width": "65px", "targets": 4 }, { "width": "65px", "targets": 5 },
                        { "width": "1px", "targets": 6 }, { "width": "1px", "targets": 7 },
                        { "width": "1px", "targets": 8 }
                    ],
                    "order": [[1, "desc"]],
                    "dom": 'Rlfrtip',
                    "stateSave": "true",
                    "lengthMenu": [[-1, 10, 20, 50, 100], ["All", 10, 20, 50, 100]]
                });

                $("#createEditAddressModal").on("hidden.bs.modal", function () {
                    $("#modalNewAddressContactId").text('');
                    $("#modalNewAddressId").attr('value', '');
                    $("#modalNewAddressEmail").val('');
                    $("#modalNewAddressPhonePrimary").val('');
                    $("#modalNewAddressPhoneSecondary").val('');
                    $("#modalNewAddressStreetAddress1").val('');
                    $("#modalNewAddressStreetAddress2").val('');
                    $("#modalNewAddressCity").val('');
                    $("#modalNewAddressStateId").text('');
                    $("#modalNewAddressZip").val('');

                    $("#modalStateDDL option").each(function (state) {
                        $("#modalStateDDL option[value='" + state + "']").attr("selected", false);
                    });
                });

            });

            function populateForm(contactId, itemId, email, phone1, phone2, street1, street2, city, stateId, zip) 
            {
                $("#modalNewAddressContactId").attr("value", contactId);
                $("#modalNewAddressId").attr("value", itemId);
                $("#modalNewAddressEmail").val(email);
                $("#modalNewAddressPhonePrimary").val(phone1);
                $("#modalNewAddressPhoneSecondary").val(phone2);
                $("#modalNewAddressStreetAddress1").val(street1);
                $("#modalNewAddressStreetAddress2").val(street2);
                $("#modalNewAddressCity").val(city);
                $("#modalNewAddressStateId").attr("value", stateId);
                $("#modalNewAddressZip").val(zip);

                $("#modalStateDDL option").each(function (state) {
                    if (state == stateId) {
                        $("#modalStateDDL option[value='" + state + "']").attr("selected", true);
                        
                    }
                });
            }
        </script>
    }
